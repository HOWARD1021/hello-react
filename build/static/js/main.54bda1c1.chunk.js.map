{"version":3,"sources":["Todo.js","Todolist.js","serviceWorker.js","index.js"],"names":["Todo","props","delete","bind","mark","this","todo","handleDelete","id","handleMark","className","isComplete","text","onClick","Component","Todolist","state","todos","todoText","filter","handleName","handleAddTodo","tododata","window","localStorage","getItem","olddata","JSON","parse","setState","length","prevProps","prevState","setItem","stringify","e","target","value","map","type","placeholder","onChange","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54bda1c1.chunk.js","sourcesContent":["import React, { Component } from  'react'\r\n\r\nclass Todo extends Component {\r\nconstructor(props){\r\nsuper(props)\r\n\r\nthis.delete=this.delete.bind(this)\r\nthis.mark=this.mark.bind(this)\r\n}\r\n\r\ndelete(){\r\n\tconst {todo,handleDelete}= this.props\r\n\thandleDelete(todo.id)\t\r\n}\r\nmark(){\r\n\tconst {todo,handleMark}=this.props\r\n\thandleMark(todo.id)\r\n}\r\nrender(){\r\n\tconst {todo}=this.props\r\n\treturn(\r\n\t\t<div className='list'>\r\n    \t<div className='list-item_state'>{todo.isComplete ? 'X' : 'O'}</div>\r\n    \t<div className={todo.isComplete ? 'list-item_checked' : 'list-item'}>{todo.text}</div>\r\n    \t<div className='list-item_action'>\r\n    \t<button onClick={this.delete}>刪除</button>\r\n    \t<button onClick={this.mark}>{todo.isComplete ? '標記成未完成':'標記成已完成'}</button>\r\n    \t</div>\r\n</div>\r\n\r\n    )\r\n }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Todo;\r\n","import React, { Component } from 'react'\r\nimport Todo from './Todo'\r\nclass Todolist extends Component {\r\n\tconstructor(props){\r\n    super(props)\r\n    this.state = {\r\n    \ttodos:[],\r\n    \ttodoText:'',\r\n    \tfilter:'all'\r\n    }\r\n\tthis.id = 1\r\n\tthis.handleName=this.handleName.bind(this)\r\n\tthis.handleAddTodo=this.handleAddTodo.bind(this)\r\n\tthis.handleDelete=this.handleDelete.bind(this)\r\n\tthis.handleMark=this.handleMark.bind(this)\r\n\t\t}\r\ncomponentDidMount(){\r\n\tconst tododata = window.localStorage.getItem('todoapp') \r\n\tif(tododata){\r\n\t\tconst olddata = JSON.parse(tododata)\r\n\t\tthis.setState({\r\n\t\t\ttodos:olddata\r\n\t\t})\r\n\t\tthis.id = olddata[olddata.length -1 ].id +1 \r\n\t}\r\n}\r\ncomponentDidUpdate(prevProps,prevState){\r\n\tif(prevState.todos !== this.state.todos){\r\n\t\twindow.localStorage.setItem('todoapp',JSON.stringify(this.state.todos))\r\n\t}\r\n\r\n}\r\n\r\nhandleName(e){\r\n\tthis.setState({\r\n\t\ttodoText:e.target.value\r\n\t})\r\n}\r\n\r\nhandleAddTodo(){\r\n\tconst {todos,todoText} = this.state\r\n\tthis.setState({\r\n\t\ttodos:[...todos,{\r\n\t\t\tid:this.id,\r\n\t\t\ttext:todoText,\r\n\t\t\tisComplete:false\r\n\t\t}],\r\n\t\ttodoText:''\r\n\t})\r\n\tthis.id++\r\n}\r\n\r\nhandleDelete(id){\r\n\tthis.setState({\r\n\t\ttodos:this.state.todos.filter(todo => todo.id !== id )\r\n\t})\r\n}\r\n\r\nhandleMark(id){\r\n\tthis.setState({\r\n\t\ttodos:this.state.todos.map(todo=>{\r\n\t\t\tif(todo.id !== id){\r\n\t\t\t\treturn todo\r\n\t\t\t}\r\n\t\t\treturn{\r\n\t\t\t\t...todo,\r\n\t\t\t\tisComplete:!todo.isComplete\r\n}\r\n\t\t})\r\n\t})\r\n\r\n}\r\n\trender (){\r\n\tconst {todos,todoText,filter}=this.state\t\r\n\treturn(\t\r\n\t <div className='wrapper'>\r\n\t  <div>\r\n  <input type = \"text\" className = \"formControl\" placeholder = \"todo\" value={todoText} onChange={this.handleName}/>\r\n  <button onClick={this.handleAddTodo}>送出</button>\t  \r\n      </div>\r\n<h2>TODO</h2>\r\n<div className='flex'>\r\n<div className='tododone' onClick={()=>this.setState({\r\nfilter:'all'\r\n})}>全部</div>\t\r\n<div className='todoundone' onClick={()=>this.setState({\r\nfilter:'Complete'\r\n})}>已完成</div>\r\n</div>\r\n    {todos.filter(todo =>filter === 'Complete' ? todo.isComplete:true  )\r\n    \t.map( todo => <Todo key={todo.id} todo={todo} handleDelete={this.handleDelete} handleMark={this.handleMark}/>)\r\n}\r\n\r\n\r\n\r\n</div> \r\n\t)\r\n }\r\n}\r\n\r\nexport default Todolist;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todolist from './Todolist.js';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Todolist/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\t"],"sourceRoot":""}